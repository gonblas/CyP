1. Resolver con SENTENCIAS AWAIT (<>y/o <await B; S>) el siguiente problema. Se debe simular una
maratón con C corredores donde en la llegada hay UNA máquinas expendedoras de botella de agua. Cuando los C
corredores han llegado al inicio comienza la carrera. Cuando un corredor termina la carrera se dirige a la máquina expendedora, espera su turno (respetando el orden de llegada), saca una botella y se retira. Nota: maximizar la concurrencia.

Cola C;
int llegaron = 0, turno = -1;

Process Corredor[id:0..C-1]{
    <llegaron++;>
    <await (llegaron == C)>;
    -- Correr carrera
    <if(turno = -1) {turno = id;}
    else {push(C, id);}>
    <await(turno == id)>;
    -- Sacar botella con exclusion mutua
    <if(not empty(C)) {pop(C, turno);}
    else {turno = -1}>
}




2. Resolver con SEMÁFOROS la siguiente situación. En una herrería hay 15 empleados que forman 5 grupos de 3
personas; los grupos se forman de acuerdo al orden de llegada (los 3 primeros pertenecen al grupo 1, los 3 siguientes al grupo 2, y así sucesivamente). Ni bien conoce el grupo al que pertenece el empleado comienza a trabajar (no debe esperar al resto de grupo para comenzar). Cada grupo debe hacer exactamente P unidades de un producto (cada unidad es hecha por un único empleado). Al terminar de hacer las P unidades de un grupo, sus 3 empleados se deben juntar para retirarse juntos. Nota: maximizar la concurrencia; ningún grupo puede hacer unidades de más.

sem mutex = 1, mutexGrupo[5] = ([5] 1), mutexBarrera[5] = ([5] 1), barrera[5] = ([5] 0);
int emp_act = 0; 
int unidades[5] = ([5] 0), terminaron = ([3] 0);



Process Empleado[id:0..14] {
    P(mutex);
    int mi_grupo = emp_act div 3; -- Division entera
    emp_act++;
    V(mutex);

    P(mutexGrupo[mi_grupo]);
    while(unidades[mi_grupo] < P){
        unidades[mi_grupo]++;
        V(mutexGrupo[mi_grupo]);
        -- Producir una unidad
        P(mutexGrupo[mi_grupo]);
    }
    V(mutexGrupo[mi_grupo]);

    int i;
    P(mutexBarera[mi_grupo]);
    terminaron[mi_grupo]++;
    if(terminaron[mi_grupo] == 3) {for i:1..3 -> V(barrera[mi_grupo]);}
    V(mutexBarrera[mi_grupo]);
    P(barrera[mi_grupo]);
}





3. Resolver con MONITORES la siguiente situación. Se debe simular un juego en el que participan 30 jugadores que forman 5 grupos de 6 personas. Al llegar cada jugador debe buscar las instrucciones y el grupo al que pertenece en un cofre de cemento privado para cada uno; para esto deben usar un único martillo gigante de a uno a la vez y de acuerdo al orden de llegada. Luego se debe juntar con el resto de los integrantes de su grupo y los 6 juntos realizan las acciones que indican sus instrucciones. Cuando un grupo termina su juego le avisa a un Coordinador que le indica en qué orden término el grupo. Nota: maximizar la concurrencia; suponer que existe una función Jugar() que simula que los 6 integrantes de un grupo están jugando juntos; suponga que existe una función Romper(grupo) que simula cuando un jugador está rompiendo su cofre con el martillo y le retorna el grupo al que pertenece.


Process Jugador[id:0..29]{
    Juego.Comenzar(grupo);
    Jugar();
    Juego.Termine(grupo, pos);
}


Process Coordinador {
    for i:1..5 {
        Juego.IndicarOrden();
    }
}


Monitor Juego {
    bool libre = true;
    int esperando = 0, pos_act = 1, terminaron = 0, posiciones[5] = ([5] -1);
    cv espera, coordinador, grupos[5];
    Cola C;


    Procedure Comenzar(grupo: out int){
        if(libre) {libre = false}
        else {esperando++; wait(espera);}
        
        Romper(grupo);

        if(esperando > 0) {esperando--; signal(espera);}
        else {libre = true;}
    }


    Procedure Termine(grupo: in int; pos: out int){
        if(posiciones[grupo] == -1){ -- Supongo que pueden hacer esto para maximizar la concurrencia
            push(C, grupo);
            terminaron++;
            signal(coordinador);
            wait(grupos[grupo]);
        }
        pos = posiciones[grupo];
    }


    Procedure IndicarOrden(){
        if(terminaron == 0) {wait(coordinador);}
        pop(C, grupo_act);
        posiciones[grupo_act] = pos_act; 
        pos_act++;
        signal_all(grupos[grupo_act]);
    }
}



































