1. Resolver con Pasaje de Mensajes Sincrónicos (PMS) el siguiente problema. En un comedor estudiantil hay un horno microondas que debe ser usado por E estudiantes de acuerdo con el orden de llegada. Cuando el estudiante accede al horno, lo usa y luego se retira para dejar al siguiente. Nota: cada Estudiante una sólo una vez el horno.



Process Admin {
    int id_act;
    queue(int) cola;
    while(true) {
        if Estudiante[*]?pedido(id_act) ->
            if(libre){
                Estudiante[id_act]!usar();
                libre = false;
            }
            else{
                push(cola, id_act);
            }
        [] Estudiante[*]!liberar() ->
            if(not empty(cola)){
                pop(cola, id_act);
                Estudiante[id_act]!usar();
            }
            else {
                libre = false;
            }
        end if;

    }
}


Process Estudiante[id:0..E-1] {
    Admin!pedido(id);
    Admin?usar();
    -- Usa el microondas
    Admin!liberar();
}



2. Resolver con ADA el siguiente problema. Se debe controlar el acceso a una base de datos. Existen L procesos Lectores y E procesos Escritores que trabajan indefinidamente de la siguiente manera:
• Escritor: intenta acceder para escribir, si no lo logra inmediatamente, espera 1 minuto y vuelve a intentarlo de la misma manera.
• Lector: intenta acceder para leer, si no lo logro en 2 minutos, espera 5 minutos y vuelve a intentarlo de la misma manera.
Un proceso Escritor podrá acceder si no hay ningún otro proceso usando la base de datos; al acceder escribe y sale de la BD. Un proceso Lector podrá acceder si no hay procesos Escritores usando la base de datos; al acceder lee y sale de la BD. Siempre se le debe dar prioridad al pedido de acceso para escribir sobre el pedido de acceso para leer.



Procedure ej2 IS

TASK AdminBD IS
    ENTRY Pedido_Lector();
    ENTRY Pedido_Escritor();
    ENTRY Salida_Lector();
    ENTRY Salida_Escritor();
END Admin;

TASK TYPE Lector;
TASK TYPE Escritor;

lectores = ARRAY(1..L) OF Lector;
escritores = ARRAY(1..E) OF Escritor;


TASK BODY AdminBD IS
    lectores, escritores: integer;
BEGIN
    lectores := 0; escritores := 0; -- Lectores y escritores en la BD
    LOOP
        SELECT
            WHEN((escritores = 0) and (Pedido_Escritor'count = 0)) =>
            ACCEPT Pedido_Lector();
                lectores := lectores + 1;
        OR  WHEN(lectores + escritores = 0) =>
            ACCEPT Pedido_Escritor();
                escritores := escritores + 1;
        OR
            ACCEPT Salida_Lector();
                lectores := lectores - 1;
        OR
            ACCEPT Salida_Escritor();
                escritores := escritores - 1;
        END SELECT;
    END LOOP;
END AdminBD;


TASK BODY Lector IS
    info: Dato;
BEGIN
    LOOP
        SELECT
            Admin.Pedido_Lector();
            LeerBD(info);
            Admin.Salida_Lector();
        OR DELAY(120);
            DELAY(300);
        END SELECT;
    END LOOP;
END Lector;


TASK BODY Escritor IS
    info: Dato;
BEGIN
    LOOP
        SELECT
            Admin.Pedido_Escritor();
            info := ...;
            EscribirBD(info);
            Admin.Salida_Escritor();
        ELSE
            DELAY(60);
        END SELECT;
    END LOOP;
END Escritor;


BEGIN
    NULL;
END ej2;


