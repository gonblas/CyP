1. Resolver con PMA (Pasaje de Mensajes ASINCRÓNICOS) el siguiente problema. Simular la atención en un locutorio con 10 cabinas telefónicas, que tiene un empleado que se encarga de atender a los clientes. Hay N clientes que al llegar esperan hasta que el empleado les indica a que cabina ir, la usan y luego se dirigen al empleado para pagarle. El empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando prioridad a los que terminaron de usar la cabina. Nota: maximizar la concurrencia; suponga que hay una función Cobrar() llamada por el empleado que simula que el empleado le cobra al cliente.


chan cola_cabina(int), cola_cobros(int), respuesta[N](int), fin_cobro[N](), liberar(int);


Process Cliente[id:0..N-1] {
    send cola_cabina(id);
    send aviso();
    receive respuesta[id](num_cabina);
    -- Usa la cabina #num_cabina
    send cola_cobros(id, num_cabina);
    send aviso();
    receive fin_cobro[id]();
}



Process Empleado {
    queue libres = {1,2,3,4,5,6,7,8,9,10};
    int id_act, num_libre;
    while(true) {
        receive aviso();
        if(not empty(cola_cobros)) ->
            receive cola_cobros(id_act, num_libre);
            push(libres, num_libre);
            Cobrar();
            send fin_cobro[id_act]();
        □  ((empty(cola_cobros)) and (not empty(libres))) ->
            receive cola_cabina(id_act);
            pop(libres, num_libre);
            send respuesta[id_act](num_libre);
    } 
}



2. Resolver con ADA la siguiente situación. En una oficina hay un empleado y P personas que van para ser atendidas para realizar un trámite. Cuando una persona llega espera a lo sumo 20 minutos a que comience a atenderla el empleado para resolver el trámite que va a hacer, y luego se va; si pasó el tiempo se retira sin realizar el trámite. El empleado atienden las solicitudes en orden de llegada. Cuando las P personas se han retirado el empleado también se retira. Nota: cada persona hace sólo un pedido y termina; suponga que existe una función Atender() llamada por el empleado que simula que el empleado está resolviendo el trámite del cliente; todas las tareas deben terminar.


Procedure ej2 IS


TASK TYPE Persona;


TASK Empleado IS
    ENTRY Pedido();
    ENTRY No_Atendido();
END Empleado;

personas = ARRAY(1..P) OF Persona;

TASK BODY Persona IS

BEGIN
    SELECT
        Empleado.Pedido();
    OR DELAY(1200);
        Empleado.No_Atendido();
END Persona;

TASK BODY Empleado IS
    i: integer;
BEGIN
    FOR i:= 1 TO P LOOP
        SELECT 
            ACCEPT Pedido() IS
                Atender();
            END Pedido;
        OR WHEN(Pedido'count = 0) =>
            ACCEPT No_Atendido();
    END LOOP;
END Empleado;

BEGIN
    NULL;
END ej2;





3. EJERCICIO SÓLO PARA ING. EN COMPUTACIÓN. Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. Simular la atención de una estación de servicio con un único surtidor que tiene un empleado que atiende a los N clientes de acuerdo al orden de llegada. Cada cliente espera hasta que el empleado termina de cargarle combustible y se retira. Nota: cada cliente carga combustible sólo una vez; todos los procesos deben terminar.



Process Cliente[id:0..N] {
    Admin!llegada(id);
    Empleado?termine();
}

Process Admin {
    queue(int) cola;
    int id_act;
    for i:= 1..2*N {
        if Cliente[*]?llegada(id_act) ->
            push(cola, id_act);
        □  (not empty(cola)); Empleado?siguiente() ->
            pop(cola, id_act);
            Empleado!siguiente_id(id_act);
    }
}


Process Empleado {
    for i:= 1..N {
        Admin!siguiente();
        Admin?siguiente_id(id_act);
        -- Le carga combustible
        Persona[id_act]!termine();
    }
}