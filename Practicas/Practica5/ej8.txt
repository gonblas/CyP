8. Una empresa de limpieza se encarga de recolectar residuos en una ciudad por medio de 3
camiones. Hay P personas que hacen continuos reclamos hasta que uno de los camiones
pase por su casa. Cada persona hace un reclamo, espera a lo sumo 15 minutos a que llegue
un camión y si no vuelve a hacer el reclamo y a esperar a lo sumo 15 minutos a que llegue
un camión y así sucesivamente hasta que el camión llegue y recolecte los residuos; en ese
momento deja de hacer reclamos y se va. Cuando un camión está libre la empresa lo envía a
la casa de la persona que más reclamos ha hecho sin ser atendido. Nota: maximizar la
concurrencia.

# Supongo que el camion va atendiendo a los llamados con mas pedidos hechos, si no hay pendientes, toma uno actual.

Procedure ej8 IS

TASK TYPE Persona
    ENTRY Identificarme(ident: IN integer);
    ENTRY Respuesta();
END Persona;

personas = ARRAY(1..P) OF Persona;


TASK TYPE Camion 

END Camion;

camiones = ARRAY(1..3) OF Camion;

TASK Empresa 
    ENTRY Reclamo(id: IN integer);
    ENTRY ReclamoSinAtender(id: IN integer);
    ENTRY Siguiente(id_cliente: out integer);
END Empresa;


TASK BODY Persona IS
    id: integer;
    atendido: bool;
BEGIN
    ACCEPT Identificarme(ident: IN integer) IS
        id := indet;
    END Identificarme;

    atendido := false;
    WHILE(not atendido)LOOP
        SELECT
            ACCEPT Respuesta();
                atendido := true;
        ELSE
            SELECT 
                Empresa.Reclamo();
                    ACCEPT Respuesta();
                    atendido := true;
                DELAY 900
                    Empresa.ReclamoSinAtender(id);
            END SELECT;
        END SELECT;
    END LOOP;
END Persona;

# Posible deadlock, puede pasar que una persona haga un reclamo de no atencion, que lo tome un camion, y que la persona sea tomada por un nuevo reclamo y que alguno de los dos camiones se quede esperando a que 


TASK BODY Empresa IS
    reclamos[P]: integer;
BEGIN
    reclamos[:] := 0;
    LOOP
        SELECT
            ACCEPT ((Reclamo'count > 0) or (max(reclamos) > 0)) Siguiente(id_cliente: out integer) IS
                SELECT 
                    ACCEPT WHEN(max(reclamos) = -1) Reclamo(id: IN integer) IS #Atiendo el reclamo actual si no hay pendientes
                        IF(reclamos[id] = -1)THEN
                            AHSHSFDFDF

                        id_cliente := id;
                    END Reclamo;
                ELSE
                    id_cliente := max_pos(reclamos); 
                END SELECT;
                reclamos[id_cliente] := -1;
        OR
            ACCEPT ReclamoSinAtender(id: IN integer) IS
                reclamos[id] := reclamos[id] + 1;
            END ReclamoSinAtender;
        END SELECT;

        END Siguiente;

        OR
            ACCEPT Siguiente(id_cliente: out integer) IS
                id_cliente := max(reclamos); 
                reclamos[id_cliente] := -1; # Indica que ya fue atendido
            END Siguiente;
        END SELECT;
    END LOOP;
END Empresa;



TASK BODY Camion IS
    
BEGIN

END Camion;




    i: integer;
BEGIN
    FOR i IN 1..P LOOP
        personas(i).Identificarme(i);
    END LOOP;
END ej8;







