a)

sem mutex = 1;

Process Persona[id:0..N-1]
{
    P(mutex);
    Fotocopiar();
    V(mutex);
}




b) 

-- Usando Passing the condition

sem mutex = 1, espera[N] = ([N] 0);
bool libre = true;
Queue Q;


Process Persona[id:0..N-1]
{
    int id_despertar;
    P(mutex);
    if(libre) {libre = false; V(mutex);}
    else {push(Q, id); V(mutex); P(espera[id])}
    Fotocopiar();
    P(mutex);
    if(empty(Q)) {libre = true}
    else {pop(Q, id_despertar); V(espera[id_despertar])}
    V(mutex);
}




c) 

-- Usando Passing the condition

sem mutex = 1, espera[N] = ([N] 0);
bool libre = true;
Queue Q;


Process Persona[id:0..N-1]
{
    int id_despertar, edad = ...;
    P(mutex);
    if(libre) {libre = false; V(mutex);}
    else {push(Q, id); V(mutex); P(espera[id, edad])}
    Fotocopiar();
    P(mutex);
    if(empty(Q)) {libre = true}
    else {pop(Q, id_despertar, edad); V(espera[id_despertar])}
    V(mutex);
}




d) 

sem espera[N] = ([1] 1 ...[N-1] 0); --El primero en 1, el resto en 0.

Process Persona[id:0..N-1]
{
    P(espera[id]);
    Fotocopiar();
    V(espera[id++]);
}




e) 

sem mutex = 1, espera[N] = ([N] 0), solicitudes = 0, listo = 0;
Queue Q;


Process Persona[id:0..N-1]
{
    P(mutex);
    push(Q, id);
    V(mutex);
    V(solicitudes);
    P(espera[id]);
    Fotocopiar();
    V(listo);
}


Process Empleado
{
    int atendidos = 0;

    while(atendidos < N){
        P(solicitudes);
        P(mutex);
        id = pop(Q, id);
        V(mutex);
        V(espera[id]);
        P(listo);
        atendidos++;
    }
}




f) 

--Supongo que Fotocopiar(n) indíca que fotocopiará en la fotocopiadora numero n, y no entra en conflicto con otro proceso que hace simultaneamente Fotocopiar(m) con n != m.

sem mutexFila = 1, mutexLibres = 1, disponibles = 10, espera[N] = ([N] 0), solicitudes = 0;
Queue Q, libres;
int asignada[N] = ([N] -1);

Process Persona[id:0..N-1]
{
    P(mutexFila);
    push(Q, id);
    V(mutexFila);
    V(solicitudes);
    P(espera[id]);
    int n = asignada[id];
    Fotocopiar(n);
    P(mutexLibres);
    push(libres, n);
    V(mutexLibres);
    V(disponibles);
}


Process Empleado
{
    int atendidos = 0;

    while(atendidos < N){
        P(solicitudes);
        P(mutexFila);
        id = pop(Q, id);
        V(mutexFila);

        P(disponibles);
        P(mutexLibres);
        fotocopiadora[id] = pop(libres);
        V(mutexLibres);
        V(espera[id]);
        atendidos++;
    }
}