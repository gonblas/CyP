Resolver este ejercicio con Semáforos o Monitores. En un centro oftalmológico hay 2 médicos con diferentes
especialidades. Existen N pacientes que deben ser atendidos. Para esto algunos de los pacientes puede ser atendido indistintamente por cualquier médico y otros solo por uno de los médicos en particular. Cada paciente saca turno con cada uno de los médicos que lo puede atender y espera hasta que llegue el turno con uno de ellos, espera a que termine de atenderlo y se retira.
Nota: suponga que existe la función ElegirMedico() que retorna 1,2 o 3. (1 indica que solo se atiende con el medico 1, 2 que solo se atiende con el medico 2 o 3 que puede ser atendido indistintamente por cualquier medico).

Cola(int)[2]; 
bool atendidos[N] = ([N] false);
int asignado[N] = ([N] -1);
sem mutexCola[2] = ([2] 1), medicos[2] = ([2] 0), listo[2] = ([2] 0), espera[N] = ([N] 0);


Process Medico[id:0..1]{
    int act_id;
    while(true){
        P(medicos[id]);
        P(mutexCola[0]);
        pop(C[id], act_id);
        V(mutexCola[0]);
        asignado[act_id] = id;
        V(espera[act_id]);
        P(listo[id]);
        --Lo atiende
        V(espera[act_id]);
    }
}


Process Pacientes[id:0..N-1]{
    int num = ElegirMedico();

    if(num == 3){
        P(mutexCola[0]);
        push(C[0], id);
        V(mutexCola[0]);
        V(medicos[0]);
        P(mutexCola[1]);
        push(C[1], id);
        V(mutexCola[1]);
        V(medicos[1]);
    }
    else {
        P(mutexCola[num-1]);
        push(C[num-1], id);
        V(mutexCola[num-1]);
        V(medicos[num-1]);
    }
    P(espera[id]);
    V(listo[asignado[id]]);
    -- Es atendido
    P(espera[id]);
}





Resolver con semáforos la siguiente situación. En un corralón de materiales
trabajan 5 empleados que deben cargar un camión con exactamente 128 bolsas
de cemento. Maximizar la concurrencia.
Notas:
- Cada empleado puede cargar 0, 1 o más bolsas.
- No se deben tomar bolsas de más.
- Los empleados tienen que irse cuando no tienen que hacer más trabajo.
- Solo se pueden usar procesos Empleado.


int bolsas = 128;
sem mutexBolsas = 1;

Process Empleado[id:0..4]{
    P(mutexBolsas);
    while(bolsas > 0){
        bolsa -= AgarrarBolsas(); -- Agarra una cantidad posible.
        V(mutexBolsas);
        -- Carga las bolsas en el camion.
        P(mutexBolsas);
    }
    V(mutexBolsas);
}






Resolver con semáforos el siguiente problema: Un sistema de software está compuesto por
un proceso CENTRAL y un conjunto de los procesos periféricos donde cada uno de ellos
realiza una determinada operación especial (cuyo resultado es un valor entero) El proceso
CENTRAL debe esperar a que todos los procesos periféricos se hayan iniciado para poder
comenzar. Una vez que el proceso central comenzó a trabajar, cada vez que necesita realizar
alguna de las 10 operaciones especiales avisa al correspondiente periférico para que realice el
trabajo y espera a que le devuelva el resultado.
Nota: Suponga que existe una función int TrabajoProcesoCentral() que simula el trabajo del
proceso CENTRAL y devuelve un valor entero entre 1 y 10, que indica cual de las 10
operaciones debe realizar en ese momento.


int llegaron = 0, resultados[10] = ([10] -1);
sem barrera = 0, mutexBarrera = 1, periferico[10] = ([10] 0), esperaCentral = 0;


Process CENTRAL {
    P(barrera);
    int valor;
    while(true){
        valor = TrabajoProcesoCentral();
        V(periferico[valor]);
        P(esperaCentral);
        res = resultados[valor];
    }

}



Process Periferico[id:1..10]{
    P(mutexBarrera);
    llegaron++;
    if(llegaron == 10) {V(barrera);}
    V(mutexBarrera);
    while(true){
        P(periferico[id]);
        -- Hacer tarea.
        resultados[id] = ...;
        V(esperaCentral);
    }
}








Resolver con MONITORES el siguiente problema. En un Crucero por el Mediterráneo hay 200 personas que deben subir al barco por medio de 10 lanchas con 20 lugares cada una. Cada persona sube a la lancha que le corresponde. Cuando en una lancha han subido sus 20 personas durante 5 minutos navega hasta el barco. Recién cuando han llegado las 10 lanchas al barco se les permite a las 200 personas subir al barco. 
Nota: suponga que cada persona llama a la función int NúmeroDeLancha() que le devuelve un valor entre 0 y 9 indicando la lancha a la que debe subir. Maximizar la concurrencia.


Process Persona[id:0..199]{
    int num = NumeroDeLancha();
    Lancha[num].Subir();
    delay(5min);
    Barco.Subir(num);
}


Monitor Lancha[num:0..9]{
    int cant = 0;
    cond cvEspera;
    
    Procedure Subir(){
        cant++;
        if(cant==20){signal_all(cvEspera);}
        else {wait(cvEspera);}
    }
}


Monitor Barco {
    int lanchas = 0;
    bool llegaron[10] = ([10] false);
    cond cvEspera;

    Procedure Subir(num_lancha: in int){
        if(llegaron[num_lancha] == false) {llegaron[num_lancha] = true; lanchas++;}
        if(lanchas == 10){signal_all(cvEspera);}
        else {wait(cvEspera);}
    }
}



1. Resolver con SEMÁFOROS los problemas siguientes:
a) En una estación de trenes, asisten P personas que deben realizar una carga de su tarjeta SUBE en la terminal disponible. La terminal es utilizada en forma exclusiva por cada persona de acuerdo con el orden de llegada. Implemente una solución utilizando sólo emplee procesos Persona. Nota: la función UsarTerminal() le permite cargar la SUBE en la terminal disponible.

Cola C;
bool libre = true;
sem mutex = 1, espera[P] = ([P] 0);


Process Persona[id:0..P-1]{
    P(mutex);
    if(libre) {libre = false; V((mutex);)}
    else {push(C, id); V(mutex); P(espera[id];)}

    UsarTerminal();

    P(mutex);
    if(not empty(C)) {pop(C, act_id); V(espera[act_id];)}
    else {libre = true;}
    V(mutex);
}




b) Resuelva el mismo problema anterior pero ahora considerando que hay T terminales disponibles. Las personas
realizan una única fila y la carga la realizan en la primera terminal que se libera. Recuerde que sólo debe emplear procesos Persona. Nota: la función UsarTerminal(t) le permite cargar la SUBE en la terminal t.

-- Cuando es asi con varias usar una Queue para las terminales y libres para la cantidad de terminales libres, y hacer passing the condition.

Cola C;
Cola terminales = {0,1,...,T-1}
sem mutex = 1, espera[P] = ([P] 0), mutexTerminal = 1;
int libres = T;

Process Persona[id:0..P-1]{
    P(mutex);
    if(libres > 0){libres--; V(mutex);}
    else {push(C, id); V(mutex); P(espera[id])}

    P(mutexTerminal);
    pop(terminales, t);
    V(mutexTerminal);
    UsarTerminal(t);

    P(mutexTerminal);
    push(terminales, t);
    V(mutexTerminal);
    P(mutex);
    if(not empty(C)){pop(C, act_id); V(espera[act_id])}
    else {libres++;}
    V(mutex);
}





2. Resolver con MONITORES el siguiente problema: En una elección estudiantil, se utiliza una máquina para voto
electrónico. Existen N Personas que votan y una Autoridad de Mesa que les da acceso a la máquina de acuerdo con el orden de llegada, aunque ancianos y embarazadas tienen prioridad sobre el resto. La máquina de voto sólo puede ser usada por una persona a la vez. Nota: la función Votar() permite usar la máquina.



Process Persona[id:0..N-1]{
    bool prioridad = ...; -- true: Ancianos y Embarazadas.
    Maquina.PedirPermiso(id, prioridad);
    Votar();
    Maquina.Liberar();
}


Process AutoridadDeMesa {
    int i;
    for i:1..N{
        Maquina.DarPermiso();
    }
}



Monitor Maquina {
    cond espera[P], cvAutoridad, termine;
    Cola(int, int) C;

    Procedure PedirPermiso(id: in int; prioridad: in bool) {
        push(C, id, prioridad); --Todos deben hacer la fila hasta que los llamen.
        signal(cvAutoridad);
        wait(espera[id]);
    }

    Procedure Liberar() {
        signal(termine);
    }


    Procedure DarPermiso() {
        if(empty(C)) {wait(cvAutoridad);}
        pop(C, id_act);
        signal(espera[id_act]);
        wait(termine);
    }
}




1. Un sistema debe validar un conjunto de 10000 transacciones que se encuentran disponibles en una estructura de datos. Para ello, el sistema dispone de 7 workers, los cuales trabajan colaborativamente validando de a 1 transacción por vez cada uno. Cada validación puede tomar un tiempo diferente y para realizarla los workers disponen de la función Validar(t), la cual retorna como resultado un número entero entre 0 al 9. Al finalizar el procesamiento, el último worker en terminar debe informar la cantidad de transacciones por cada resultado de la función de validación. Nota: maximizar la concurrencia.


sem mutexTransacciones = 1, mutexValores[10] = ([10] 1), mutexTerminaron;
int valores[10] = ([10] 0), terminaron = 0;
Cola transacciones;

Process Worker[id:0..6]{
    int valor, i;
    int mis_valores[10] = ([10] 0);

    P(mutexTransacciones);
    while(not empty(transacciones)){
        valor = Validar(t);
        V(mutexTransacciones);
        mis_valores[valor]++;
        P(mutexTransacciones);
    }
    V(mutexTransacciones);


    for i:0..9{
        P(mutexValores[i]);
        valores[i] += mis_valores[i];
        V(mutexValores[i]);
    }

    P(mutexTerminaron);
    terminaron++;
    if(terminaron == 7) {
        -- Informar transacciones
        for i:0..9{
            print(i, ': ', valores[i]);
        }
    }
    V(mutexTerminaron);
}







2) En una empresa trabajan 20 vendedores ambulantes que forman 5 equipos de 4 personas cada uno (cada vendedor conoce previamente a que equipo pertenece). Cada equipo se encarga de vender un producto diferente. Las personas de un equipo se deben juntar antes de comenzar a trabajar. Luego cada integrante del equipo trabaja independientemente del resto vendiendo ejemplares del producto correspondiente. Al terminar cada integrante del grupo debe conocer la cantidad de ejemplares vendidos por el grupo. Nota: maximizar la concurrencia.


Process Vendedor[id:0..19]{
    int grupo = ...; --Grupos enumerados de 0 a 4
    CanalEquipo[grupo].Comenzar(grupo);
    int vendidos = Vender();
    CanalEquipo[grupo].Reportar(grupo, vendidos, totales);
}



Monitor CanalEquipo[id:0..4] {
    cond barrera;
    int contador = 0, total = 0;


    Procedure Comenzar(){
        contador++;
        if(contador == 4) {signal_all(barrera); contador = 0}
        else {wait(barrera);}
    }

    Procedure Reportar(vendidos: in int; tot: out int){
        total += vendidos;
        contador++;
        if(contador == 4) {signal_all(barrera)}
        else {wait(barrera);}
        tot = total;
    }
}





1. Resolver con SEMÁFOROS el siguiente problema. En una planta verificadora de vehículos, existen 7 estaciones donde se dirigen 150 vehículos para ser verificados. Cuando un vehículo llega a la planta, el coordinador de la planta le indica a qué estación debe dirigirse. El coordinador selecciona la estación que tenga menos vehículos asignados en ese momento. Una vez que el vehículo sabe qué estación le fue asignada, se dirige a la misma y espera a que lo llamen para verificar. Luego de la revisión, la estación le entrega un comprobante que indica si pasó la revisión o no. Más allá del resultado, el vehículo se retira de la planta. Nota: maximizar la concurrencia.

Cola C, fila[7];
sem mutexCola = 1, esperando = 0, espera[150] = ([150] 0), estacion[7] = ([7] 0), sem mutexFila[7] = ([7] 1);
sem mutexEstaciones[7] = ([7] 1);
int estaciones[7] = ([7] 0), asignada[150] = ([150] -1);
bool comprobantes[150] = ([150] false);


Process Vehiculos[id:0..149]{
    P(mutexCola);
    push(C, id);
    V(mutexCola);
    V(esperando);
    P(espera[id]);
    int mi_estacion = asignada[id];
    P(mutexFila[mi_estacion]);
    push(fila[mi_estacion], id);
    V(mutexFila[mi_estacion]);
    V(estacion[mi_estacion]);
    P(espera[id]);
    bool comp = comprobantes[id];
}



Process Coordinador {
    int i, j;

    for i:1..150{
        P(esperando);
        int min = 9999, min_index = 0;
        for j:0..6{
            P(mutexEstaciones[j]);
            if(estaciones[j]<min) {min=estaciones[j]; min_index = j;}
            v(mutexEstaciones[j]);
        }
        estaciones[min_index]++;
        P(mutexCola);
        pop(C, id);
        V(mutexCola);
        asignada[id] = min_index;
    }
}


Process Estacion[id:0..6]{
    while(true){
        P(estacion[id]);
        P(mutexFila[id]);
        pop(fila[id], id_act);
        V(mutexFila[id]);
        P(mutexEstaciones[id]);
        estaciones[id]--;
        V(mutexEstaciones[id]);
        -- Realizando revision
        comprobantes[id_act] = DarComprobante();
        V(espera[id_act]);
    }
}




2. Resolver con MONITORES el siguiente problema. En un sistema operativo se ejecutan 20 procesos que
periódicamente realizan cierto cómputo mediante la función Procesar(). Los resultados de dicha función son
persistidos en un archivo, para lo que se requiere de acceso al subsistema de E/S. Sólo un proceso a la vez puede hacer uso del subsistema de E/S, y el acceso al mismo se define por la prioridad del proceso (menor valor indica mayor prioridad).


Process Proceso[id:0.19]{
    int prior = ...;
    while(true){
        text resultados = Procesar();
        SubsistemaES.PedirAcceso(id, prior, resultados, arch);
        text += resultados;
        SubsistemaES.Liberar(arch);
    }
}



Monitor SubsistemaES {
    text archivo;
    bool libre = true;
    Cola (int,int) C;
    cond cvEspera[20];

    Procedure PedirAcceso(id: in int; prior: in int; resultados: in text; arch: out text){
        if(libre) {libre=false;}
        else {push(C, (id, prior)); wait(cvEspera[id]);}
        arch = archivo;
    }

    Procedure Liberar(arch: in text){
        archivo = arch;
        if(not empty(C)){pop(C, (id, prior)); signal(cvEspera[id]);}
        else {libre = true;}
    }
}



1. Resolver con SEMÁFOROS el siguiente problema. En una fábrica de muebles trabajan 50 empleados. A llegar, los empleados forman 10 grupos de 5 personas cada uno, de acuerdo al orden de llegada (los 5 primeros en llegar forman el primer grupo, los 5 siguientes el segundo grupo, y así sucesivamente). Cuando un grupo se ha terminado de formar, todos sus integrantes se ponen a trabajar. Cada grupo debe armar M muebles (cada mueble es armado por un solo empleado); mientras haya muebles por armar en el grupo los empleados los irán resolviendo (cada mueble es armado por un solo empleado). Nota: Cada empleado puede tardar distinto tiempo en armar un mueble. Sólo se pueden usar los procesos “Empleado”, y todos deben terminar su ejecución. Maximizar la concurrencia.


int emp_act = 0;
Cola C;
bool libre = true;
sem mutex = 1, espera[50] = ([50] 0), mutexBarrera[10] = ([10] 1), barrera[10] = ([10] 0), mutexMuebles[10] = ([10] 1);
int integrantes[10] = ([10] 0), muebles[10] = ([10] M);


Process Empleado[id:0.49]{
    P(mutex);
    if(libre) {libre=false; V(mutex);}
    else {push(C, id); V(mutex); P(espera[id];)}

    int grupo = emp_act div 5; --div realiza la division entera
    emp_act++;

    P(mutex);
    if(not empty(C)){pop(C, act_id), V(espera[act_id])}
    else{libre=true;}
    V(mutex);
    
    int i;
    P(mutexBarrera[grupo]);
    integrantes[grupo]++;
    if(integrantes[grupo] == 5){for i:1..5 -> V(barrera[grupo]);}
    V(mutexBarrera[grupo]);
    P(barrera[grupo]);

    P(mutexMuebles[grupo]);
    while(muebles[grupo] > 0){
        muebles[grupo]--;
        V(mutexMuebles[grupo]);
        -- Hacer mueble.
        P(mutexMuebles[grupo]);
    }
    V(mutexMuebles[grupo]);
}




2. Resolver con MONITORES el siguiente problema. En un comedor estudiantil hay un horno microondas que debe ser usado por E estudiantes de acuerdo con el orden de llegada. Cuando el estudiante accede al horno, lo usa y luego se retira para dejar al siguiente. Nota: cada Estudiante una sólo una vez el horno; los únicos procesos que se pueden usar son los “estudiantes”.


Process Estudiante[id:0..E-1]{
    Horno.PedirAcceso();
    UsarHorno();
    Horno.Liberar();
}


Monitor Horno {
    cond espera;
    int esperando = 0;
    bool libre = true;

    Procedure PedirAcceso(){
        if(libre) {libre=false}
        else {esperando++; wait(espera);}
    }

    Procedure Liberar(){
        if(esperando > 0) {esperando--; signal(espera);}
        else {libre = true;}
    }
}

1. Resolver con SEMÁFOROS el siguiente problema. En un restorán trabajan C cocineros y M mozos. De
forma repetida, los cocineros preparan un plato y lo dejan listo en la bandeja de platos terminados, mientras
que los mozos toman los platos de esta bandeja para repartirlos entre los comensales. Tanto los cocineros
como los mozos trabajan de a un plato por vez. Modele el funcionamiento del restorán considerando que la
bandeja de platos listos puede almacenar hasta P platos. No es necesario modelar a los comensales ni que
los procesos terminen.

int ocupado = 0, libre = 0;
sem mutexBandeja = 1, listos = 0, vacios = P;
Plato bandeja[P];

Process Cocinero[id:0..C-1]{
    while(true){
        P(vacios);
        P(mutexBandeja);
        bandeja[libre] = plato;
        libre = (libre+1) mod P;
        V(mutexBandeja);
        -- Agrega un plato a la bandeja.
        V(listos);
    }
}


Process Mozo[id:0..M-1]{
    while(true){
        P(listos);
        P(mutexBandeja);
        plato = bandeja[ocupado];
        ocupado = (ocupado+1) mod P;
        V(mutexBandeja);
        V(vacios);
    }
}




2. Resolver con MONITORES el siguiente problema. En una planta verificadora de vehículos existen 5
estaciones de verificación. Hay 75 vehículos que van para ser verificados, cada uno conoce el número de
estación a la cual debe ir. Cada vehículo se dirige a la estación correspondiente y espera a que lo atiendan.
Una vez que le entregan el comprobante de verificación, el vehículo se retira. Considere que en cada estación
se atienden a los vehículos de acuerdo con el orden de llegada. Nota: maximizar la concurrencia.


Process Vehiculo[id:0..74]{
    int num = NumeroDeEstacion(); -- Num desde 0 a 4
    Admin[num].EsperarAtencion(id, comp);
}

Process Estacion[id:0..4]{
    Comprobante comp;

    while(true){
        Admin[id].Siguiente(id_act);
        comp = GenerarComprobante(id_act);
        Admin[id].EntregarComprobante(id_act, comp);
    }
}



Monitor Admin[num:0..4] {
    cond cvEntrada, estacion;
    bool libre = true;
    Cola(int) C;
    Comprobante comprobantes[75];

    Procedure EsperarAtencion(id: in int; act_comp: out Comprobante){
        push(C, id);
        signal(estacion);
        wait(cvEspera)
        act_comp = comprobantes[id];
    }

    Procedure Siguiente(id: out int) {
        if(empty(C)){wait(estacion);}
        pop(C, id);
    }

    Procedure EntregarComprobante(id: in int; comp: in Comprobante){
        comprobantes[id] = comp;
        signal(cvEntrada);
    }
}