1. Resolver con SENTENCIAS AWAIT ( <> y <await B; S > ) el siguiente problema. En un negocio hay un
empleado que debe atender a C clientes de acuerdo al orden de llegada. Al terminar la atención de un cliente el empleado debe entregarle un número aleatorio para un sorteo. Después de ser atendido el cliente debe imprimir el número que le entregó el empleado. Nota: maximizar la concurrencia.


Cola cola;
int nums[C] = ([C] 0);


Process Empleado {
    int id, i;

    for i: 1..C{
        <await(not empty(cola)); pop(cola, id)>;
        nums[id] = -1; --Indica que lo esta atendiendo
        -- Atiende al cliente
        nums[id] = Rand();
    }
}



Process Clientes[id:0..C-1]{
    <push(cola, id)>;
    <await (nums[id]!=0)>
    -- Es atendido
    <await (nums[id]!=-1)>
    print(nums[id]);
}







2. Resolver con SEMAFOROS el siguiente problema. En el examen de una materia hay un docente y 50 alumnos.
Cuando todos los alumnos han llegado comienza el examen. A medida que los alumnos van terminando le entregan
el examen al docente, y esperan a que este le devuelva la nota del examen. El docente debe corregir los exámenes de acuerdo al orden en que los alumnos entregaron. Nota: maximizar la concurrencia.

sem barrera = 0, mutex=1, pedidos=0, espera[50] = ([50] 0);
float notas[50] = ([50] -1);
int listos = 0;
Cola C;

Process Profesor {
    P(barrera);
    int i;
    for i:1..50{
        P(pedidos);
        P(mutex);
        pop(C, id_act, examen);
        V(mutex);
        -- Corrige el examen
        nota[id_act] = DarNota(examen);
        V(espera[id]);
    }
}


Process Alumno[id:0..49]{
    P(mutex);
    listos++;
    if(listos==50){
        for i:1..51 V(barrera);
    }
    V(mutex);
    P(barrera);

    -- Alumnos hacen el examen.

    P(mutex);
    push(C, id, examen);
    V(mutex);
    V(pedidos);

    P(espera[id]);
    mi_nota = notas[id];
}




3. Resolver con MONITORES el siguiente problema. Hay un impresora que debe ser utilizado por N personas de
acuerdo al orden de llegada (de a una persona a la vez). Nota: maximizar la concurrencia.


Process Persona[id:0..N]{
    Impresora.Pedir();
    --Utilizar impresora.
    Impresora.Liberar();
}

Monitor Impresora {
    bool libre = true;
    int esperando = 0;
    cond cv;

    Procedure Pedir(){
        if(libre) {libre = false}
        else {
            esperando++;
            wait(cv);
        }
    }

    Procedure Liberar(){
        if(esperando > 0){signal(cv); esperando--;}
        else {libre = true;}
    }
}