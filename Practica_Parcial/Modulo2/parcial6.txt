1. Resolver con PMA (Pasaje de Mensajes ASINCRÓNICOS) el siguiente problema. En un negocio hay 3 empleados que atienden de acuerdo al orden de llegada a N personas que van a pedir un presupuesto. Cuando el cliente sabe que empleado lo va a atender le entrega el listado de productos que necesita, y luego el empleado le entrega el presupuesto del mismo. Cuando un empleado está libre atiende a la primera persona que esté esperando para ser atendida, y si no hubiese nadie esperando se dedica a ordenar el local durante unos minutos.



chan llegada(int), mi_empleado[N](int), listas[3](queue(text)), presupuestos[N](float);
chan siguiente(int), siguiente_id[3](int);

Process Persona [id:0..N-1] {
    int num_emp;
    queue(text) lista = ...;
    float mi_presupuesto;

    send llegada(id);
    receive mi_empleado[id](num_emp);
    send listas[num_emp](lista);
    receive presupuesto[id](mi_presupuesto);
}


Process Admin {
    int id_emp, id_act; 
    while(true) {
        receive siguiente(id_emp);
        if(not empty(llegada)){
            receive llegada(id_act);
            send mi_empleado[id_act](num_emp);
        }
        else {
            id_act := -1;
        }
        send siguiente_id[num_emp](id_act);
    }
}


Process Empleado[id:0..2] {
    int id_act;
    queue(text) lista_act;
    float presupuesto_act;
    while(true) {
        send siguiente(id);
        receive siguiente_id[id](id_act);
        if(id_act = -1){
            delay(rand(1,600)); -- ordenar el local durante unos minutos (de 1 a 10 min).
        }
        else {
            receive listas[id](lista_act);
            presupuesto_act = HacerPresupuesto(lista_act);
            send presupuestos[id_act](presupuesto_act);
        }
    }
}




2. Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. Simular una clase donde hay 2 ayudantes para atender a A alumnos de acuerdo al orden de llegada. El alumno al llegar espera hasta que cualquiera de los ayudantes lo atienda, le hace su consulta y cuando el ayudante le responde el alumno se retira. Nota: los ayudantes no necesitan terminar su ejecución.



Process Alumno[id:0..A-1] {
    int num_ayudante;
    Admin!llegada(id);
    Ayudante[*]?atender(num_ayudante);
    text consulta = ..., rta;
    Ayudante[num_ayudante]!consultas(consulta);
    Ayudante[num_ayudante]?respuestas(rta);
}

Process Admin {
    int id_ayudante, id_act;
    queue cola;
    do Alumno[*]?llegada(id_act) -> 
        push(cola, id_act);
    □  (not empty(cola)); Ayudante[*]?siguiente(id_ayudante) -> 
        pop(cola, id_act);
        Ayudante[id_ayudante]!siguiente_id(id_act);
}


Process Ayudante[id:0..1] {
    int id_act;
    text consulta_act, respuesta_act;
    while(true) {
        Admin!siguiente(id);
        Admin?siguiente_id(id_act);
        Alumno[id_act]!atender(id);
        Alumno[id_act]?consultas(consulta_act);
        respuesta_act = ElaborarRespuesta(consulta_act);
        Alumno[id_act]!respuestas(respuesta_act);
    }
}


3. Resolver con ADA el siguiente problema. Hay un Empleado que atiende pedidos de un Director y de C Clientes dando prioridad a los pedidos del director. Los clientes al llegar esperan a lo sumo 20 minutos al que el empleado lo atienda, y si no se retira sin resolver su pedido (intenta sólo una vez hacer el pedido). El director hace un pedido y si no es atendido inmediatamente espera 10 minutos y lo vuelve a intentar, y esto lo repite hasta que finalmente atienden su pedido y se retira. Nota: todas las tareas deben terminar.


Procedure ej3 IS

TASK TYPE Cliente;

TASK Director;

TASK Empleado IS
    ENTRY Pedido_Cliente();
    ENTRY Pedido_Director();
    ENTRY No_Atendido();
END Empleado;

clientes = ARRAY(1..C) OF Cliente;


TASK BODY Cliente IS

BEGIN
    SELECT
        Empleado.Pedido_Cliente();
    OR DELAY(1200)
        Empleado.No_Atendido();
    END SELECT;
END Cliente;


TASK BODY Director IS
    atendido: boolean;
BEGIN
    atendido := false;
    WHILE(not atendido)LOOP
        SELECT
            Empleado.Pedido_Director();
            atendido := true;
        ELSE
            DELAY(600);
    END LOOP;
END Director;


TASK BODY Empleado IS
    i: integer;
BEGIN
    FOR i:= 1 to (C + 1) LOOP
        SELECT
            WHEN(Pedido_Director'count = 0) =>
            ACCEPT Pedido_Cliente() IS
                Atender();
            END Pedido_Cliente;
        OR
            ACCEPT Pedido_Director() IS
                Atender();
            END Pedido_Director;
        OR WHEN(Pedido_Director'count = 0) =>
            ACCEPT No_Atendido();
        END SELECT;
    END LOOP;
END Empleado;

BEGIN
    NULL;
END ej3;